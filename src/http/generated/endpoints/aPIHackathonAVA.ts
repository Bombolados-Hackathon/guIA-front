/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * API Hackathon ‚Äì AVA
 * OpenAPI spec version: 1.0.0
 */
import {
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  HTTPValidationError,
  UserXPResponse
} from '../modelTypes';

import { customMutator } from '../../axios';




/**
 * @summary Retorna nome e XP de um usu√°rio
 */
export const getUserXpApiV1UsersUserIdXpGet = (
    userId: number,
 signal?: AbortSignal
) => {
      
      
      return customMutator<UserXPResponse>(
      {url: `/api/v1/users/${userId}/xp`, method: 'GET', signal
    },
      );
    }
  

export const getGetUserXpApiV1UsersUserIdXpGetQueryKey = (userId: number,) => {
    return [`/api/v1/users/${userId}/xp`] as const;
    }

    
export const getGetUserXpApiV1UsersUserIdXpGetQueryOptions = <TData = Awaited<ReturnType<typeof getUserXpApiV1UsersUserIdXpGet>>, TError = void | HTTPValidationError>(userId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserXpApiV1UsersUserIdXpGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUserXpApiV1UsersUserIdXpGetQueryKey(userId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserXpApiV1UsersUserIdXpGet>>> = ({ signal }) => getUserXpApiV1UsersUserIdXpGet(userId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(userId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUserXpApiV1UsersUserIdXpGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetUserXpApiV1UsersUserIdXpGetQueryResult = NonNullable<Awaited<ReturnType<typeof getUserXpApiV1UsersUserIdXpGet>>>
export type GetUserXpApiV1UsersUserIdXpGetQueryError = void | HTTPValidationError


export function useGetUserXpApiV1UsersUserIdXpGet<TData = Awaited<ReturnType<typeof getUserXpApiV1UsersUserIdXpGet>>, TError = void | HTTPValidationError>(
 userId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserXpApiV1UsersUserIdXpGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserXpApiV1UsersUserIdXpGet>>,
          TError,
          Awaited<ReturnType<typeof getUserXpApiV1UsersUserIdXpGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetUserXpApiV1UsersUserIdXpGet<TData = Awaited<ReturnType<typeof getUserXpApiV1UsersUserIdXpGet>>, TError = void | HTTPValidationError>(
 userId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserXpApiV1UsersUserIdXpGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserXpApiV1UsersUserIdXpGet>>,
          TError,
          Awaited<ReturnType<typeof getUserXpApiV1UsersUserIdXpGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetUserXpApiV1UsersUserIdXpGet<TData = Awaited<ReturnType<typeof getUserXpApiV1UsersUserIdXpGet>>, TError = void | HTTPValidationError>(
 userId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserXpApiV1UsersUserIdXpGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Retorna nome e XP de um usu√°rio
 */

export function useGetUserXpApiV1UsersUserIdXpGet<TData = Awaited<ReturnType<typeof getUserXpApiV1UsersUserIdXpGet>>, TError = void | HTTPValidationError>(
 userId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserXpApiV1UsersUserIdXpGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetUserXpApiV1UsersUserIdXpGetQueryOptions(userId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




