/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '@kubb/plugin-client/clients/axios'
import type { RequestConfig, ResponseErrorConfig } from '@kubb/plugin-client/clients/axios'
import type { QueryKey, QueryClient, UseSuspenseQueryOptions, UseSuspenseQueryResult } from '@tanstack/react-query'
import type {
  GetUserXpApiV1TasksTaskIdXpGetQueryResponse,
  GetUserXpApiV1TasksTaskIdXpGetPathParams,
  GetUserXpApiV1TasksTaskIdXpGet404,
  GetUserXpApiV1TasksTaskIdXpGet422,
} from '../../http/generated/models/GetUserXpApiV1TasksTaskIdXpGet.ts'
import { queryOptions, useSuspenseQuery } from '@tanstack/react-query'
import { getUserXpApiV1TasksTaskIdXpGet } from '../../http/generated/getUserXpApiV1TasksTaskIdXpGet.ts'

export const getUserXpApiV1TasksTaskIdXpGetSuspenseQueryKey = (task_id: GetUserXpApiV1TasksTaskIdXpGetPathParams['task_id']) =>
  [{ url: '/api/v1/tasks/:task_id/xp', params: { task_id: task_id } }] as const

export type GetUserXpApiV1TasksTaskIdXpGetSuspenseQueryKey = ReturnType<typeof getUserXpApiV1TasksTaskIdXpGetSuspenseQueryKey>

export function getUserXpApiV1TasksTaskIdXpGetSuspenseQueryOptions(
  task_id: GetUserXpApiV1TasksTaskIdXpGetPathParams['task_id'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const queryKey = getUserXpApiV1TasksTaskIdXpGetSuspenseQueryKey(task_id)
  return queryOptions<
    GetUserXpApiV1TasksTaskIdXpGetQueryResponse,
    ResponseErrorConfig<GetUserXpApiV1TasksTaskIdXpGet404 | GetUserXpApiV1TasksTaskIdXpGet422>,
    GetUserXpApiV1TasksTaskIdXpGetQueryResponse,
    typeof queryKey
  >({
    enabled: !!task_id,
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return getUserXpApiV1TasksTaskIdXpGet(task_id, config)
    },
  })
}

/**
 * @summary Retorna XP ganho ao concluir tarefa
 * {@link /api/v1/tasks/:task_id/xp}
 */
export function useGetUserXpApiV1TasksTaskIdXpGetSuspense<
  TData = GetUserXpApiV1TasksTaskIdXpGetQueryResponse,
  TQueryKey extends QueryKey = GetUserXpApiV1TasksTaskIdXpGetSuspenseQueryKey,
>(
  task_id: GetUserXpApiV1TasksTaskIdXpGetPathParams['task_id'],
  options: {
    query?: Partial<
      UseSuspenseQueryOptions<
        GetUserXpApiV1TasksTaskIdXpGetQueryResponse,
        ResponseErrorConfig<GetUserXpApiV1TasksTaskIdXpGet404 | GetUserXpApiV1TasksTaskIdXpGet422>,
        TData,
        TQueryKey
      >
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? getUserXpApiV1TasksTaskIdXpGetSuspenseQueryKey(task_id)

  const query = useSuspenseQuery(
    {
      ...(getUserXpApiV1TasksTaskIdXpGetSuspenseQueryOptions(task_id, config) as unknown as UseSuspenseQueryOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<UseSuspenseQueryOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseSuspenseQueryResult<TData, ResponseErrorConfig<GetUserXpApiV1TasksTaskIdXpGet404 | GetUserXpApiV1TasksTaskIdXpGet422>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}