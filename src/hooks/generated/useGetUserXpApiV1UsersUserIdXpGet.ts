/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '@kubb/plugin-client/clients/axios'
import type { RequestConfig, ResponseErrorConfig } from '@kubb/plugin-client/clients/axios'
import type { QueryKey, QueryClient, QueryObserverOptions, UseQueryResult } from '@tanstack/react-query'
import type {
  GetUserXpApiV1UsersUserIdXpGetQueryResponse,
  GetUserXpApiV1UsersUserIdXpGetPathParams,
  GetUserXpApiV1UsersUserIdXpGet404,
  GetUserXpApiV1UsersUserIdXpGet422,
} from '../../http/generated/models/GetUserXpApiV1UsersUserIdXpGet.ts'
import { queryOptions, useQuery } from '@tanstack/react-query'
import { getUserXpApiV1UsersUserIdXpGet } from '../../http/generated/getUserXpApiV1UsersUserIdXpGet.ts'

export const getUserXpApiV1UsersUserIdXpGetQueryKey = (user_id: GetUserXpApiV1UsersUserIdXpGetPathParams['user_id']) =>
  [{ url: '/api/v1/users/:user_id/xp', params: { user_id: user_id } }] as const

export type GetUserXpApiV1UsersUserIdXpGetQueryKey = ReturnType<typeof getUserXpApiV1UsersUserIdXpGetQueryKey>

export function getUserXpApiV1UsersUserIdXpGetQueryOptions(
  user_id: GetUserXpApiV1UsersUserIdXpGetPathParams['user_id'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const queryKey = getUserXpApiV1UsersUserIdXpGetQueryKey(user_id)
  return queryOptions<
    GetUserXpApiV1UsersUserIdXpGetQueryResponse,
    ResponseErrorConfig<GetUserXpApiV1UsersUserIdXpGet404 | GetUserXpApiV1UsersUserIdXpGet422>,
    GetUserXpApiV1UsersUserIdXpGetQueryResponse,
    typeof queryKey
  >({
    enabled: !!user_id,
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return getUserXpApiV1UsersUserIdXpGet(user_id, config)
    },
  })
}

/**
 * @summary Retorna nome e XP de um usu√°rio
 * {@link /api/v1/users/:user_id/xp}
 */
export function useGetUserXpApiV1UsersUserIdXpGet<
  TData = GetUserXpApiV1UsersUserIdXpGetQueryResponse,
  TQueryData = GetUserXpApiV1UsersUserIdXpGetQueryResponse,
  TQueryKey extends QueryKey = GetUserXpApiV1UsersUserIdXpGetQueryKey,
>(
  user_id: GetUserXpApiV1UsersUserIdXpGetPathParams['user_id'],
  options: {
    query?: Partial<
      QueryObserverOptions<
        GetUserXpApiV1UsersUserIdXpGetQueryResponse,
        ResponseErrorConfig<GetUserXpApiV1UsersUserIdXpGet404 | GetUserXpApiV1UsersUserIdXpGet422>,
        TData,
        TQueryData,
        TQueryKey
      >
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? getUserXpApiV1UsersUserIdXpGetQueryKey(user_id)

  const query = useQuery(
    {
      ...(getUserXpApiV1UsersUserIdXpGetQueryOptions(user_id, config) as unknown as QueryObserverOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<QueryObserverOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseQueryResult<TData, ResponseErrorConfig<GetUserXpApiV1UsersUserIdXpGet404 | GetUserXpApiV1UsersUserIdXpGet422>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}